"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()  # Load environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    "django-insecure-0@!kg0p*3y@%z)nupveuws*ha5n&i*0jkg2a+&fm^a-j5nr*0s"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "function",
    "function.users",
    "rest_framework",
    "djoser",
    "rest_framework_simplejwt",
]
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_FROM_EMAIL = os.getenv('TWILIO_FROM_EMAIL')
TWILIO_VERIFY_SERVICE_SID = os.getenv('TWILIO_VERIFY_SERVICE_SID') 

# Email Backend
#EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
#EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.example.com')
#EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
#EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
#EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
#EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

AUTH_USER_MODEL = "function.Users"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SIMPLE_JWT = {
    'USER_ID_FIELD': 'user_id',
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # In-memory cache
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # Cache timeout in seconds (e.g., 5 minutes)
    }
}

DJOSER = {
    "TOKEN_MODEL": None,
    "SERIALIZERS": {
        "user_create": "function.serializers.UserCreateSerializer",
    },
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": 'users_db',
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT", "5432"),
    },
}

# Password validation
UserAttributeSimilarityValidator = (
    "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
)

MinimumLengthValidator = (
    "django.contrib.auth.password_validation.MinimumLengthValidator"
)

CommonPasswordValidator = (
    "django.contrib.auth.password_validation.CommonPasswordValidator"
)

NumericPasswordValidator = (
    "django.contrib.auth.password_validation.NumericPasswordValidator"
)


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": UserAttributeSimilarityValidator,
    },
    {
        "NAME": MinimumLengthValidator,
    },
    {
        "NAME": CommonPasswordValidator,
    },
    {
        "NAME": NumericPasswordValidator,
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
