services:
  postgres-db:
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    entrypoint: |
      bash -c '
      docker-entrypoint.sh postgres &
      
      until psql -U postgres -c "\l" >/dev/null 2>&1; do
        echo "Waiting for PostgreSQL to start..."
        sleep 1
      done
      
      echo "PostgreSQL is ready"

      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'insurance'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE insurance;"
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'models'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE models;"
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'network'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE network;"
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'logging'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE logging;"
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'payments'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE payments;"
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '"'"'users'"'"'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE users;"

      psql -U postgres -tc "SELECT 1 FROM pg_roles WHERE rolname = '"'"'$POSTGRES_USER'"'"'" | grep -q 1 || psql -U postgres -c "CREATE USER $POSTGRES_USER WITH PASSWORD '"'"'$POSTGRES_PASSWORD'"'"';"

      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE insurance TO $POSTGRES_USER;"
      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE models TO $POSTGRES_USER;"
      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE network TO $POSTGRES_USER;"
      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE logging TO $POSTGRES_USER;"
      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE payments TO $POSTGRES_USER;"
      psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE users TO $POSTGRES_USER;"

      wait $(jobs -p)
      '
    networks:
      - backend

  django-app:
    build:
      context: ../backend/main
      dockerfile: Dockerfile
    command: ["./django-web-app-entrypoint.sh"]
    env_file:
      - .env
    volumes:
      - ../backend/main:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres-db
    restart: always
    networks:
      - backend

  payment-service:
    build:
      context: ../backend/services/payments
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "4000:4000"
    depends_on:
      - postgres-db
    restart: always
    networks:
      - backend

  ml-service:
    build:
      context: ../backend/services/machinelearning
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      - postgres-db
    restart: always
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge